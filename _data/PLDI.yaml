2025:
- Awardee: |
    Brandon Lucia and Benjamin Ransford
  Other: |
    (for 2015) _[A Simpler, Safer Programming and Execution Model for Intermittent Systems.](https://dl.acm.org/doi/10.1145/2737924.2737978)_
  Citation: |
    Energy harvesting enables novel devices and applications without batteries, but intermittent operation under energy harvesting poses new challenges to memory consistency that threaten to leave applications in failed states not reachable in continuous execution. This work provides analytical models that aid in reasoning about intermittence and develops DINO (Death Is Not an Option), a programming and execution model that simplifies programming for intermittent systems and ensures volatile and nonvolatile data consistency despite near-constant interruptions. DINO is the first system to address these consistency problems in the context of intermittent execution and dramatically simplifies programming, reducing the set of possible failure-related control transfers.


2024:
- Awardee: |
    Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden,
    Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau,
    Patrick McDaniel
  Other: |
    (for 2014) _[FlowDroid: Precise Context, Flow, Field,
    Object-sensitive and Lifecycle-aware Taint Analysis for Android
    Apps](https://dl.acm.org/doi/10.1145/2594291.2594299)_
  Citation: |
    This paper introduced FlowDroid: a context-, flow-, field-,
    object-sensitive and lifecycle-aware static taint analysis tool
    for Android applications. Unlike other static-analysis approaches
    at the time it achieved very high recall and precision. FlowDroid
    addresses two main challenges: precision requires an analysis that
    is context-, flow-, field- and object-sensitive; recall demands a
    complete model of Android’s app lifecycle and execution
    environment including user interaction. FlowDroid as a tool has
    since been widely used in studies of privacy and security for
    Android, and has inspired further innovation in security analysis
    of Android apps. FlowDroid continues to be maintained, actively
    used, and frequently cited, demonstrating its ongoing influence.

2023:
- Awardee: |
    Jonathan Ragan-Kelley (MIT), Connelly Barnes (Adobe), Andrew Adams (Adobe),
    Sylvain Paris (Adobe), Frédo Durand (MIT), Saman Amarasinghe (MIT)
  Other: |
    (for 2013) _[Halide: A Language and Compiler for Optimizing Parallelism, Locality, and Representation in Image Processing Pipelines](https://doi.org/10.1145/2491956.2462176)_
  Citation: |
    Halide is a C++-embedded DSL that exploits locality and vectorized
    computation for efficient use of SIMD multicore, GPU, and DSP
    platforms in image and array processing applications. It has
    become a key element of modern image processing pipelines at
    Adobe, Google & Qualcomm. The main innovation of Halide is
    separation of algorithm from execution schedule. Programmers can
    separately schedule the image pipeline for their target
    architecture. Combined with stochastic search over the space of
    schedules, Halide enables terse, composable programs to achieve
    state-of-the-art performance on a wide range of real image
    processing pipelines to achieve order of magnitude performance
    improvements over hand-tuned C and CUDA implementations.

2022:
- Awardee: |
    John Regehr (University of Utah), Yang Chen (Meta), Pascal Cuoq
    (TrustInSoft), Eric Eide (University of Utah), Chucky Ellison, Xuejun Yang (Microsoft)
  Other: |
    (for 2012) _[Test-Case Reduction for C Compiler Bugs](https://doi.org/10.1145/2254064.2254104)_
  Citation: |
    Finding small, valid, C programs that trigger C compiler bugs is
    hard. Distilling a bug-causing compiler input to its essence was
    previously a largely manual process assisted by delta
    debugging. This work enhanced delta debugging with new techniques
    for generating valid (without undefined behavior) test variants,
    including pluggable program transformations that perform reduction
    operations to produce tests 25 times smaller than previous
    schemes. The paper influenced the broader testing and fuzzing
    communities beyond compiler testing by reinforcing the importance
    of domain-specific transformers for test case reduction and in
    seed generation for fuzzing.

2021:
- Awardee: Xuejun Yang (Microsoft), Yang Chen (Microsoft), Eric Eide (University of Utah), and John Regehr (University of Utah)
  Other: |
    (for 2011) _[Finding and understanding bugs in C compilers](https://dl.acm.org/doi/10.1145/1993316.1993532)_
  Citation: |
    The paper tackles head-on the difficult problem of automatically finding 
    miscompilation bugs in compilers for unsafe languages such as C.  Based 
    on a clever combination of scalable static analysis at generation-time, 
    and dynamic checks at run-time, the paper contributes a method for random 
    generation of C programs that are guaranteed to be free from undefined 
    behavior when they execute, yet are still interesting enough that they 
    have a good chance of exposing compiler bugs that corrupt these results.  
    These programs can be used to find bugs via cross-checking results across 
    multiple compilers, and are implemented in the Csmith tool which, at the 
    time of the paper, was used to find hundreds of bugs in 11 different C 
    compilers, including the widely-used open source GCC and LLVM compilers.  
    Csmith revolutionized the field of compiler testing, inspiring and influencing 
    a large body of work that has seen broad uptake by industry, including many 
    practical compiler testing tools for C and many other languages, including 
    C++, OpenCL, CUDA and Verilog.

2020:
- Awardee: Woongki Baek (Ulsan National Institute of Science and Technology) and Trishul M. Chilimbi (Amazon)
  Other: |
    (for 2010) _[Green: A Framework for Supporting Energy-Conscious Programming using Controlled Approximation](https://dl.acm.org/doi/10.1145/1806596.1806620)_
  Citation: |
    The PLDI 2010 paper “Green: A Framework for Supporting
    Energy-Conscious Programming using Controlled Approximation” by
    Woongki Baek and Trishul Chilimbi demonstrated conclusively two
    important things: (1) that frameworks supporting approximations that
    trade energy/performance costs for quality of service could be
    generalized and automated, and (2) applying this approach in data
    center search workloads could result in significant energy reduction
    and cost, saving millions of dollars in practice.  Green proved that
    systematic approaches to approximate computing could have enormous
    commercial impact and predated and informed many subsequent machine
    learning optimizations, such as using reduced precision arithmetic in
    deep learning models.  Green also inspired subsequent efforts, to more
    deeply encode approximation semantics into the underlying programming
    language design. 
    
2019:
- Awardee: Cormac Flanagan (UC Santa Cruz) and Stephen N. Freund (Williams College)
  Other: |
    (for 2009) _[FastTrack: Efficient and Precise Dynamic Race Detection](https://dl.acm.org/citation.cfm?id=1542490)_
  Citation: |
    FastTrack had both an immediate and a permanent impact on how dynamic data-race 
    detection is done.  Prior work either used lock-set algorithms for performance 
    despite false positives or were slow due to algorithms that required space 
    proportional to the number of threads times the size of the heap and read/write 
    operations that took time proportional to the number of threads.  FastTrack 
    contributed an algorithm and implementation that was truly the best of both 
    worlds in most cases: a set of a natural and elegant choices for optimizing 
    data structures and algorithms for dynamic data-race detection leads to a system 
    that is as fast as lock-set algorithms whenever lock-set algorithms would not 
    produce false positives but that gracefully falls back to slower approaches 
    for objects where lock-set algorithms would lead to false positives.  In both 
    theory and practice, the FastTrack algorithm became the baseline against which 
    all subsequent dynamic data-race detectors are judged. 

2018:
- Awardee: Uday Bondhugula, Albert Hartono, J. Ramanujam, and P. Sadayappan
  Other: |
    (for 2008) _[A Practical Automatic Polyhedral Parallelizer and Locality Optimizer](https://dl.acm.org/citation.cfm?id=1375595)_
  Citation: |
    The PLDI 2008 paper "A Practical Automatic Polyhedral Parallelizer and
    Locality Optimizer" significantly advanced the power and practical automatic
    application of polyhedral analysis to automatically determine parallelism
    and locality improving affine transforms of regular programs expressed as
    sequences of possibly imperfect loops. The work presented in this paper
    produced practical implementations that could automatically generate OpenMP
    parallel programs from sequential nested loops written in C. This inspired a
    large number of other researchers to further develop polyhedral
    optimizations based on this approach, like automatic code generation for
    GPUs and FPGA circuits by high level synthesis from nested sequential
    loops. The ideas in this paper have proved to be enduring and widely
    applicable and even to this day keep finding new applications, e.g., for
    mapping machine learning algorithms to specialized accelerators.

2017:
- Awardee: Nicholas Nethercote and Julian Seward
  Other: |
    (for 2007) _[Valgrind: a framework for heavyweight dynamic binary instrumentation](http://dl.acm.org/citation.cfm?id=1250746)_
  Citation: |
    Valgrind is a framework for writing dynamic binary instrumentation
    tools, which interleave the execution of program monitoring code
    with the execution of a program itself. The best known tool built
    with Valgrind is Memcheck, which detects uses of undefined values
    down to the bit level. Other tools track "tainted" or special
    (e.g., password) values. Valgrind facilitates the construction of
    these tools by abstracting the details of complex computer
    architectures and providing an expressive interface for writing
    instrumenting code. Valgrind pioneered dynamic binary
    recompilation for tight integration and optimization of
    instrumentation code. The paper contains a careful analysis of the
    requirements of dynamic binary instrumentation tools and shows
    that competing tools, unlike Valgrind, sacrifice completeness of
    features for simplicity of implementation, use, or
    performance. The paper is widely cited. Many open-source defect
    detection tools build on Valgrind and have improved a wide range
    of open-source and commercial software.

2016:
- Awardee: Emery Berger and Benjamin Zorn
  Other: |
    (for 2006) _[DieHard: probabilistic memory safety for unsafe languages](http://dl.acm.org/citation.cfm?id=1134000)_
  Citation: |
    The PLDI 2006 "DieHard" paper by Emery Berger and Benjamin Zorn
    introduced the concept of probabilistic memory safety (for unsafe
    languages such as C/C++) through three main techniques: (1)
    randomization of object placement in the heap; (2)
    overprovisioning of the heap to provide expected gaps between
    objects; (3) optional replication of processes to enable even
    greater fault tolerance.  This approach was shown to provide
    protection against a variety of memory errors, including dangling
    pointers and buffer overflows, as formalized mathematically and
    evaluated empirically. By fully randomizing heap object locations
    in memory -- effectively pushing address-space layout
    randomization to the individual object level -- DieHard also makes
    systems more resilient to attack. Variations of DieHard were
    implemented on Linux, Mac OS, and Windows.  The Windows
    implementation directly influenced the Fault Tolerant Heap of
    Windows 7 and the Windows 8 user-mode heap allocator.

2015:
- Awardee: Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood
  Other: |
    (for 2005) _[Pin: building customized program analysis tools with dynamic instrumentation](http://dl.acm.org/citation.cfm?id=1065034)_
  Citation: |
    This paper introduced Pin, a dynamic binary instrumentation
    framework that enables the creation of dynamic program analysis
    tools.  Pin uses dynamic compilation to instrument executables and
    dynamically-linked libraries while they are running, permitting
    the tool writer to study the behavior of an application at the
    instruction level without significant perturbation to application
    behavior.  The PLDI 2005 paper is highly cited and the system it
    describes is in widespread use in academia and industry.  Pin's
    ease of use and relative efficiency have made it the tool of
    choice for dynamic binary instrumentation.

2014:
- Awardee: Maged M. Michael
  Other: |
    (for 2004) _[Scalable Lock-Free Dynamic Memory Allocation](http://dl.acm.org/citation.cfm?id=996841.996848)_
  Citation: |
    Maged Michael's PLDI'04 paper is considered a landmark in memory
    allocation for multithreaded programs, presenting the first
    completely lock-free general-purpose user-space allocator. It
    provides good performance with respect to scalability, speed and
    space efficiency, while at the same time only relying on common
    hardware and OS support. The work is highly regarded and
    frequently referenced, and is also the basis of multiple memory
    allocator implementations, both in IBM products and in follow-on
    research.

2013:
- Awardee: David Gay, Philip Levis, J. Robert von Behren, Matt Welsh, Eric Brewer, and David E. Culler
  Other: |
    (for 2003) _[The nesC language: A holistic approach to networked embedded systems](http://dl.acm.org/citation.cfm?id=781133)_
  Citation: |
    This is the first publication to describe the design,
    implementation, and optimization of the language nesC, which is a
    variant of the C programming language especially well suited to
    the programming of embedded systems.  Much as the C programming
    language made possible the development of UNIX, so has nesC made
    possible the development of TinyOS.  A decade hence, nesC is still
    the language of choice for developing applications under TinyOS on
    "motes" and other embedded systems platforms.  Central to the
    design of nesC and TinyOS is the notion of an asynchronous, or
    non-blocking, call.  This form of software architecture nicely
    accommodates the timing uncertainties and failures experienced by
    embedded systems applications in the real world.  The success and
    longevity of nesC can be attributed to its precise and useful
    formulations of concurrency, atomicity, and modularization with
    regard to its intended application audience.  These formulations
    allow for efficient implementations while offering encapsulation
    mechanisms that encourage software sharing and reuse.  The nesC
    paper has amassed hundreds of citations, and the language
    continues to be in widespread use for teaching, research, and
    industry in the embedded systems community.

2012:
- Awardee: Cormac Flanagan, K. Rustan M. Leino, Mark Lillibridge, Greg Nelson, James B. Saxe, and Raymie Stata
  Other: |
    (for 2002) _[Extended Static Checking for Java](http://dl.acm.org/citation.cfm?doid=512529.512558)_
  Citation: |
    This paper marks a turning point in the field of static checking,
    describing pragmatic design decisions that promote practicality over
    completeness. Pioneered in ESC/Modula-3, techniques from ESC/Java are
    now widely used in various forms in Microsoft&#8217;s development
    tools, notably as part of Code Contracts which ships with
    VisualStudio.  Recent innovations strongly influenced by ESC/Java
    include refinement types for Haskell, and verification of Eiffel
    programs.

2011:
- Awardee: Thomas Ball, Rupak Majumdar, Todd Millstein, and Sriram K. Rajamani
  Other: |
    (for 2001) _[Automatic predicate abstraction of C programs](http://doi.acm.org/10.1145/378795.378846)_
  Citation: |
   The paper, "Automatic Predicate Abstraction of C Programs" by
   Thomas Ball, Rupak Majumdar, Todd D. Millstein, and Sriram K.
   Rajamani presented the underlying predicate abstraction technology
   of the SLAM project for checking that software satisfies critical
   behavioral properties of the interfaces it uses and to aid software
   engineers in designing interfaces and software that ensure reliable
   and correct execution. The technology is now part of Microsoft's
   Static Driver Verifier in the Windows Driver Development Kit. This
   is one of the earliest examples of automation of software
   verification on a large scale and the basis for numerous efforts to
   expand the domains that can be verified.

2010:
- Awardee: Vasanth Bala, Evelyn Duesterwald, and Sanjeev Banerji
  Other: |
    (for 2000) _[Dynamo: A Transparent Dynamic Optimization System](http://doi.acm.org/10.1145/349299.349303)_
  Citation: |
    Dynamo pioneered the technique of monitoring, analyzing, and
    optimizing binary code on-the-fly while the program executes,
    without relying on any program modifications, compiler hints,
    profile data from prior runs, or special purpose hardware. Contrary
    to intuition, one could use Dynamo to substantially improve the
    performance of a binary's execution, even when it was generated by
    a state-of-the-art optimizing compiler. By continuously monitoring
    its own overhead, Dynamo could suspend itself (and resume later)
    when the optimization gains were not sufficient to offset the cost
    of its own operation. The ability for a software-only system to
    speed up a program binary without any kind of modification or
    externally provided hints challenged much entrenched thinking at
    the time, and catalyzed a rethinking of the compiler-architecture
    interface. Hardware designs were shifting more of the performance
    optimization burden from the hardware to the compiler. At the same
    time software was moving towards greater use of dynamic binding,
    resulting in a shrinking optimization scope for the compiler. These
    two trends were in tension with one another. By operating at binary
    execution time, Dynamo helped bridge this growing gap by
    complementing the compiler's traditional strength in static control
    flow based optimization with instruction-level runtime trace-based
    optimization. This paper was the first in a series of publications
    that continue to this day on similar trace-based systems for
    dynamic binary optimization, dynamic binary instrumentation, and
    dynamic binary translation.

2009:
- Awardee: Matteo Frigo
  Other: |
    (for 1999) _[A Fast Fourier Transform Compiler](http://doi.acm.org/10.1145/301618.301661)_
  Citation: |
    The 1999 PLDI paper "A Fast Fourier Transform Compiler" by Matteo
    Frigo describes the implementation of *genfft*, a special-purpose
    compiler that produces the performance critical code for a library,
    called FFTW (the "Fastest Fourier Transform in the West"), that
    computes the discrete Fourier transform. FFTW is the predominant
    open fast Fourier transform package available today, as it has been
    since its introduction a decade ago. *genfft* demonstrated the
    power of domain-specific compilation -- FFTW achieves the best or
    close to best performance on most machines, which is remarkable for
    a single package. By encapsulating expert knowledge from the FFT
    algorithm domain and the compiler domain, *genfft* and FFTW provide
    a tremendous service to the scientific and technical community by
    making highly efficient FFTs available to everyone on any machine.
    As well as being the fastest FFT in the West, FFTW may be the last
    FFT in the West as the quality of this package and the maturity of
    the field may mean that it will never be superseded, at least for
    computer architectures similar to past and current ones.

2008:
- Awardee: Matteo Frigo, Charles E. Leiserson, and Keith H. Randall
  Other: |
    (for 1998) _[The Implementation of the Cilk-5 Multithreaded Language](http://doi.acm.org/10.1145/277652.277725)_
  Citation: |
    The 1998 PLDI paper "Implementation of the Cilk-5 Multithreaded
    Language" by Matteo Frigo, Charles E. Leiserson, and Keith H.
    Randall introduced an efficient form of thread-local deques to
    control scheduling of multithreaded programs. This innovation not
    only opened the way to faster and simpler runtimes for fine-grained
    parallelism, but also provided a basis for simpler parallel
    recursive programming techniques that elegantly extend those of
    sequential programming. The stack-like side of a deque acts just
    like a standard procedure stack, while the queue side enables
    breadth-first work-stealing by other threads. The work-stealing
    techniques introduced in this paper are beginning to influence
    common practice, such as the Intel Threading Building Blocks
    project, an upcoming standardized fork-join framework for Java, and
    a variety of projects at Microsoft.

2007:
- Awardee: Glenn Ammons, Thomas Ball, and James R. Larus
  Other: |
    (for 1997) _[Exploiting Hardware Performance Counters with Flow and Context Sensitive Profiling](http://doi.acm.org/10.1145/258915.258924)_

2006:
- Awardee: David Tarditi, Greg Morrisett, Perry Cheng, Christopher Stone, Robert Harper, and Peter Lee
  Other: |
    (for 1996) _[TIL: A Type-Directed Optimizing Compiler for ML](http://doi.acm.org/10.1145/231379.231414)_

2005:
- Awardee: Jeffrey Dean, Craig Chambers, and David Grove
  Other: |
    (for 1995) _[Selective Specialization for Object-Oriented Languages](http://doi.acm.org/10.1145/207110.207119)_

2004:
- Awardee: Amitabh Srivastava and Alan Eustace
  Other: |
    (for 1994) _[ATOM: a system for building customized program analysis tools](http://doi.acm.org/10.1145/178243.178260)_

2003:
- Awardee: Hans Boehm
  Other: |
    (for 1993) _[Space Efficient Conservative Garbage Collection](http://portal.acm.org/citation.cfm?doid=155090.155109)_

2002:
- Awardee: Jens Knoop, Oliver R&#252;thing, and Bernhard Steffen
  Other: |
    (for 1992) _[Lazy Code Motion](http://doi.acm.org/10.1145/183432.183443)_

2001:
- Awardee: Michael E. Wolf and Monica S. Lam
  Other: |
    (for 1991) _[A data locality optimizing algorithm](http://portal.acm.org/citation.cfm?id=113449&coll=portal&dl=ACM&CFID=1250278&CFTOKEN=93017092)_

2000:
- Awardee: Karl Pettis and Robert C. Hansen
  Other: |
    (for 1990) _[Profile guided code positioning](http://portal.acm.org/citation.cfm?id=93550&coll=portal&dl=ACM&CFID=1260981&CFTOKEN=84971644)_
