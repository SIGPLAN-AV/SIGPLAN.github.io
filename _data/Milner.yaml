2024:
- Awardee: Isil Dillig
  Citation: |
    Isil Dillig is recognized for her profound and far-reaching contributions to program analysis, verification, and synthesis. Her groundbreaking research has advanced the theory and practice of formal methods, with applications ranging from security vulnerability detection to code migration, relational reasoning, and zero-knowledge cryptography. Her seminal results in abductive inference, neurosymbolic programming, and solver-based reasoning have opened new directions in programming languages and verification research.
    Dillig's work is distinguished by extraordinary technical depth, breadth, and originality. She has repeatedly anticipated emerging trends, notably pioneering the integration of machine learning with formal methods, including influential contributions to reinforcement learning for program verification and synthesis and the use of large language models in specification-guided code generation. Across all of these areas, her research combines sophisticated theoretical insight with a commitment to practical impact.
    In addition to her technical achievements, Dillig has demonstrated outstanding leadership through mentorship, community service, and building a strong research group. Her influence is evident both in her prolific scholarship and in the success of her students and collaborators.

    * Selection committee: Niki Vazou, Anders Møller, Brigitte Pientka, Sophia Drosopoulou, Amal Ahmed, Lars Birkedal, Steve Blackburn.

2024:
- Awardee: Armando Solar-Lezama
  Citation: |
    Program synthesis is an old idea that Armando reignited with the
    Sketch system beginning with his Ph.D. work, setting the template
    for subsequent program synthesis approaches---using a solver as
    part of the synthesis pipeline. From helping to start benchmark
    competitions in program synthesis, identifying new domains
    (databases, CAD, ML) where program synthesis can be effectively
    utilized, and developing fundamental ideas and synthesis
    techniques, Armando has led in setting the agenda in one of the
    most vibrant and exciting subfields of programming languages over
    the last decade. Armando’s recent DreamCoder research continues to
    lead the field, showing how to generalize program synthesis to
    discover and leverage abstractions, dramatically increasing the
    scale of computations that synthesis can successfully
    target. Bridging also into machine learning, Armando has brought
    program synthesis to enable neuro-symbolic computation with better
    interpretability, verifiability, generalization, counterfactual
    reasoning, and structuring computation search spaces for more
    effective inference.

    * Selection committee: Antony Hosking, Sandrine Blazy, Suresh Jagannathan, Ranjit Jhala, Éric Tanter.

2023:
- Awardee: Nate Foster
  Citation: |
    Nate Foster is a world leader in programming languages and
    software-defined networking. His skills as a PL researcher run the
    gamut: adept at design, theory, implementation, and applications,
    a combination rare to find in a single individual. His work brings
    elegant PL techniques to bear on fundamental problems in
    networking, makes pioneering contributions to both fields, and
    enables verification approaches for networking
    implementations. Notably, this is the second field Nate has opened
    up: his PhD work introduced "lenses" as a language construct for
    bidirectional tree transformations applied to the database view
    update problem. His work has been recognized with multiple
    distinguished paper and "test of time" awards. Nate also gives
    significant service & leadership to the PL community on conference
    program and steering committees, mentoring workshops, and
    representative to influential working groups.

    * Selection committee: Antony Hosking, Sandrine Blazy, Suresh Jagannathan, Ranjit Jhala, Éric Tanter.

2022:
- Awardee: Viktor Vafeiadis
  Citation: |
    Viktor has become a world leader in semantics and verification
    research. His body of work includes fundamental and influential
    contributions to the study of concurrency, in particular
    separation logic and relaxed memory models. His landmark doctoral
    thesis developed RGSep, the first extension of concurrent
    separation logic to support formal proofs about fine-grained
    concurrent algorithms.  His work on Cave presented the first fully
    automatic verifier for establishing linearizability of a class of
    concurrent data structures, including ones with non-fixed
    linearization points. His work on CompCertTSO presented the first
    verified compiler for a concurrent language under a relaxed memory
    model. He developed the first direct (and mechanized) proof of
    soundness for concurrent separation logic (CSL) based on
    operational semantics—beautifully simple compared to prior proofs
    and a key enabler for proving soundness of more advanced program
    logics like CAP and Iris. He developed the first separation logic
    for the C/C++ relaxed memory model—a tour-de-force achievement
    compared to the standard CSL which assumes sequential
    consistency. This spawned a whole body of work on modular
    verification of concurrent data structures under relaxed memory
    models. His work has found and corrected a number of serious flaws
    in the C/C++ concurrency model, which led to changes in the C++
    standard. And his "promising" semantics for relaxed-memory
    concurrency offered one of the first viable solutions to the
    30-year-old "out-of-thin-air" problem and spawned much follow-on
    work. His work on GenMC presented the first efficient model
    checkers for relaxed-memory C/C++ programs with optimality
    guarantees about their state space exploration. Recent work
    together with his postdoc Azalea Raad (now faculty at Imperial),
    presented the first "persistency semantics" for non-volatile
    memory on multicore architectures. Viktor is not only highly-cited
    and incredibly prolific—he is also a true pioneer, repeatedly
    exploring dauntingly technical problems in the semantics and
    verification of concurrent programs before others dare to try.

    * Selection committee: Antony Hosking, Sandrine Blazy, Suresh Jagannathan, Ranjit Jhala, Éric Tanter.

2021:
- Awardee: Emina Torlak
  Citation: |
    Emina Torlak is a leader in the area of automated verification.  She has
    made both conceptual contributions and built tools that are state of the
    art and widely used. On the conceptual side, the notion of a solver-aided
    programming language is hers and has quickly become standard terminology.
    Torlak defined a set of linguistic abstractions that elegantly generalized
    various prior point solutions that integrated solvers into languages. The
    rapidity with which the notion of solver-aided languages took hold
    indicates both how natural the idea is in retrospect and how relevant it
    is to a large group of researchers in the PL community.

    Torlak demonstrated that it was feasible to build a fairly general-purpose
    solver-aided language with Rosette. The idea of a lightweight symbolic VM
    is principled and effective. She and her colleagues have successfully
    deployed Rosette in a wide and impressive variety of applications across
    domains, notably in systems. Further, Rosette is seeing broad application,
    including by researchers outside of the PL community.  Finally, Torlak's
    tool Kodkod for finding solutions to Alloy models from her dissertation
    work has been and continues to be widely used.

    In summary, Emina Torlak has contributed an impressive breadth of
    fundamental insights.  Just as impressive is her depth of contribution to
    open-source software that others have been able to build their research
    on.

    * Selection committee: Emery Berger, Michelle Strout, Michael Hicks, Eijiro Sumii, Todd Millstein.

2020:
- Awardee: Eran Yahav
  Citation: |
    Eran Yahav has a record of sustained, high-impact contributions to
    the programming languages research community over nearly two
    decades.  Much of his work has concerned effective static
    reasoning about concurrent programs, which is a longstanding
    challenge due to the complex and non-local ways in which threads
    can interact with one another.  Yahav developed novel abstractions
    for verifying safety and correctness properties of concurrent
    programs and used them to validate non-trivial concurrent
    algorithms in Java.  Later, he extended and applied program
    synthesis techniques to concurrent programs in creative ways, for
    example, demonstrating how to synthesize a correct concurrent
    version of a sequential algorithm and how to automatically repair
    an existing concurrent algorithm through additional
    synchronization.  Most recently, Yahav has been an early leader in
    the area of "big code," leveraging machine learning techniques to
    solve difficult programming tasks, including code search, code
    completion, and reverse engineering.  This work has influenced
    others in the research community to pursue this research direction
    and has led to practical software engineering tools for
    programmers.

    * Selection committee: Emery Berger, Michelle Strout, Derek Dreyer, Eijiro Sumii, Todd Millstein.

2019:
- Awardee: Martin Vechev
  Citation: |
    Martin Vechev is a prolific researcher who has made major
    contributions to many areas of programming languages. He is a
    pioneer who is often one of the first in the PL community to move
    into a new area. He is particularly well known for his seminal
    papers and tools at the interface of programming languages and
    machine learning. An example tool is JSNice, which deobfuscates
    JavaScript code by learning a probabilistic graphical model from a
    large corpus of programs, which is then used to predict improved
    variable names and perform statistical type inference. Another
    example at this interface is his work on using abstract
    interpretation for proving safety properties of deep neural
    networks, such as robustness. His many other contributions include
    significant advances in concurrent memory management, synthesis of
    synchronization code for concurrent programs, and efficient
    program analysis.
    
2018:
- Awardee: Ranjit Jhala
  Citation: |
    Ranjit Jhala has demonstrated a long track-record of producing
    foundational and impactful contributions to our understanding of
    programming language theory and implementation. Jhala was one of
    the principal developers of the BLAST automatic verification tool
    for checking temporal safety properties of C programs. A key
    contribution was the notion of lazy abstraction which integrates
    three phases of the software model checking loop: abstraction,
    checking and refinement. Jhala developed an algorithm for model
    checking safety properties that continuously builds and refines a
    single abstract model on demand by the model checker. This allows
    different parts of the model to exhibit just the degrees of
    freedom required to verify a desired property. The work on lazy
    abstraction has proved to be very influential in the verification
    community. Jhala also used Craig interpolation to efficiently
    construct, from a given abstract error trace that cannot be
    concretized, a parsimonious abstraction that removes the trace. He
    developed the method for programs with arithmetic and pointer
    expressions, and call-by-value function calls. This resulting
    technique was successfully applied to programs over 130,000 lines
    which was previously not possible.

    Jhala has significantly advanced the practical application of
    refinement types which allow programmers to attach additional
    specifications to existing types. These additional specifications
    allow interesting properties to be proved about code, such as
    invariants over recursively defined data structures. The problem
    with such specifications is that they can be too onerous to write
    down and get right. Jhala's work on Liquid Types showed that a
    useful and expressive class of these specifications can be
    inferred in a largely automatic way, making the approach far more
    practical at a reasonable cost. Jhala's work with Liquid Types has
    significantly extended the state-of-the-art, adding a notion of
    predictability and decidability often not found in SMT-based
    software verification, and extending the usability and
    expressiveness of formal type systems.

    Jhala has also worked on data race detection, information flow and
    timing analysis for Javascript and code analytics. Jhala has also
    written a lengthy tutorial on Liquid Haskell, proved to be an
    excellent communicator and mentor who has given many engaging and
    inspiring presentations, and served extensively on program
    committees of top conferences.

    * Selection committee: Antony Hosking, Chandra Krintz, Xavier
      Leroy, François Pottier and Satnam Singh.

2017:
- Awardee: Derek Dreyer
  Citation: |
    Derek Dreyer has made deep, creative research contributions of
    great breadth. His areas of impact are as diverse as module
    systems, data abstraction in higher-order languages, mechanized
    proof systems and techniques, and concurrency models and
    semantics. He has refactored and generalized the complex module
    systems of SML and OCaml; devised logical relations and techniques
    that enabled advances in reasoning about higher-order imperative
    programs; and developed novel separation logics for modular
    verification of low-level concurrent programs. His research papers
    are a model of clarity and depth, and he has worked actively to
    translate his foundational ideas into practice – most recently
    with the RustBelt project to provide formal foundations for the
    Rust language. Additionally, Dreyer has contributed leadership,
    support, and mentorship in activities such as the PLMW series of
    workshops, which are instrumental in growing the next generation
    of PL researchers.

    * Selection committee: Kathleen Fisher, Antony Hosking, Chandra
      Krintz, Xavier Leroy, Yannis Smaragdakis.

2016:
- Awardee: Stephanie Weirich
  Citation: |
    Stephanie Weirich has made deep and sustained contributions to
    programming language research in the areas of functional
    programming, dependent types, and proof assistants.  She has been
    one of the main investigators of type inference for Generalized
    Algebraic Data Types (GADTs), and, with collaborators at Microsoft
    Research, she helped put this technology into practice in the
    widely used GHC Haskell implementation.  Weirich, with
    collaborators at Penn and Cambridge, also initiated and led the
    POPLMark challenge, a highly visible and influential effort to
    promote the use of proof assistants for formalizing and checking
    the theory of programming languages.  She has also greatly
    contributed to the understanding of dependent types in practical
    programming languages, and is now involved in an effort to bring
    the benefits of dependent types to Haskell.  Finally, Weirich has
    made substantial contributions to the programming languages
    community, notably with her involvement in the Programming
    Languages Mentoring Workshop (PLMW), which has blossomed into a
    highly successful workshop that is held several times a year at
    venues including POPL, PLDI, ICFP, and SPLASH; Weirich was one of
    the original organizers of PLMW at POPL 2012, and continues to
    serve on the workshop's steering committee.

    * Selection committee: Tom Ball, Matthew Flatt, Antony Hosking,
      Sorin Lerner, Yannis Smaragdakis.

2015:
- Awardee: David Walker
  Citation: |
    David Walker has made deep and varied contributions to programming
    language research, but always with an eye towards emerging and
    surprising applications of foundational theory.  He was one of the
    co-authors of the work on Typed Assembly Language (TAL), which
    showed how conventional type systems could be brought to bear on
    low-level machine code, and which forms the basis for today's
    typed virtual machines such as Microsoft's .NET.  Focusing on the
    need for better reasoning principles for pointers, he helped
    develop Alias Types, the Calculus of Capabilities, and
    region-based formalisms that influenced the design of type systems
    for modern languages like Cyclone, Vault, and Rust.  Walker also
    provided semantic foundations for secure program monitoring, and
    used his insights to develop new tools for enforcing security
    policies on legacy code.  Long before "big data" was a hot topic,
    he and his co-authors designed languages for processing large,
    ad-hoc data collections.  Recognizing trends in hardware, he
    developed new techniques for verifying the safety of programs
    executing on faulty processors.  And, most recently, foreseeing
    the rise of software-defined networking, he has worked with people
    from both the networking and PL communities to develop new,
    high-level languages (Frenetic, Pyretic) for programming networks.
    In summary, Prof. Walker is a groundbreaking researcher in
    programming languages, connecting foundations to novel
    applications.

2014:
- Awardee: Sumit Gulwani
  Citation: |
    Sumit Gulwani has made pioneering contributions to the field of
    programming languages, especially in the areas of program analysis
    and program synthesis.  Building on his foundational work in
    program analysis including using randomized algorithms, improving
    abstract interpretation, and reasoning about programs as
    continuous functions, Dr. Gulwani recognized the important
    connection between program verification and program synthesis.
    His research has demonstrated that imprecise human intent, in the
    form of examples, natural language, and other kinds of input, can
    be transformed into incomplete program specifications, which
    together with ranking techniques can then be used to synthesize
    intended programs, empowering users to accomplish complex and
    repetitive programming tasks without needing any knowledge of
    programming. His contributions include algorithms for synthesizing
    string transformation programs by examples, published in POPL
    2011, and the technical basis for "Flash Fill", a new feature
    shipping in Microsoft's Excel 2013.  He has since then extended
    this line of algorithmic work to synthesizing programs in several
    other important domains and also broadly advertised this line of
    work by publishing in top-tier ACM conferences in various other
    areas including AI, machine learning, HCI, databases, and
    knowledge discovery. He has also championed the application of
    program synthesis techniques to developing intelligent tutoring
    systems for numerous subject domains including introductory
    programming, mathematics, logic, and automata theory.  The
    visionary aspects of his work were recently recognized by the CACM
    Editorial Board when two of his recent papers appeared as CACM
    Research Highlights in the same issue, and a summary of his work
    on computer-aided Education was accepted to appear as a CACM
    article.

    In summary, Dr. Gulwani is a highly motivated, creative, and
    inter-disciplinary researcher whose vision is to empower computer
    users around the world to be more productive and educated.  His
    insights in using program synthesis to address problems in
    end-user programming and education will have deep and lasting
    influence.

2013:
- Awardee: Lars Birkedal
  Citation: |
    Lars Birkedal is a world leader in foundational programming
    languages research, and *the* pre-eminent researcher of his
    generation in the area of programming language semantics.  His
    work, spanning a multitude of top journal and conference
    publications, has had significant impact in many areas.  These
    include foundational type theory, compiler implementation,
    Milner's bigraphical reactive systems, logics and models for
    relational parametricity, and verification technology for
    semantically complex languages.

    Birkedal is a pioneer in "bringing semantics into the 21st
    century": developing rigorous and scalable semantic and
    verification techniques to account for the needs and complexities
    of modern languages.  Toward this end in particular, he has (a)
    made numerous advances to the theory and practice of region-based
    memory management, (b) made fundamental contributions to the
    theory of relational parametricity, which underlies our semantic
    understanding of abstract data types, and (c) developed
    higher-order separation logics and other powerful tools for the
    modular verification of realistic imperative, object-oriented, and
    concurrent programming patterns.

    In short, Birkedal has tackled hard problems of paramount
    importance to the future of programming language research, and has
    made startling advancements across the board.  He has done so both
    independently, via the research group he built up at the IT
    University of Copenhagen, and also through fruitful collaborations
    with an impressive network of international colleagues, thus
    setting an excellent example for other junior researchers.

2012:
- Awardee: Shriram Krishnamurthi
  Citation: |
    The SIGPLAN 2012 Robin Milner Young Researcher Award goes to Shriram
    Krishnamurthi, a prolific researcher who brings programming language
    theory to bear in many other disciplines, thus exposing its
    foundational value. His research contributions range from type
    soundness proofs for Java and influential extensions thereof, through
    foundational aspects of web programming, to model-driven development
    and empirical studies. The most important aspects of Krishnamurthi's
    research are

     - that it cuts across multiple disciplines, including education,
       software engineering, formal methods and security, but always
       building on the firm ground of programming language theory;
     - its orientation towards practicality and applicability to standard
       platforms: programming systems for teaching, reactive web
       programming, executable JavaScript semantics, and analysis
       techniques for security policies;
     - that it has resulted not only in publications, but also in
       practical systems that are used in academia and industry; and
     - the clarity of its exposition and presentation.
     - Shriram is also an influential educator, reaching out beyond the
       university to infect school kids with algebraic thinking.

    In summary, Shriram is an extraordinarily broad researcher, making
    sustained contributions in important and exciting areas, with a
    commitment to education that is ensuring that his ideas have even
    broader impact.
